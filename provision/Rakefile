##########################################################################
# Copyright 2016 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

require 'open-uri'
require 'base64'
require 'timeout'
require 'json'

PIPELINE_NAME = 'testpipeline'
AUTH = Base64.encode64('user.admin:badger')

{
  'debian' => { prefix: 'deb', install_command: 'dpkg -i' },
  'centos' => { prefix: 'noarch.rpm', install_command: 'rpm -i' }
}.each do |os, meta|
  namespace os do
    task :clean do
      rm_rf 'installer-testing'
    end

    task :init do
      mkdir_p 'installer-testing'
    end

    task :download do
      cd 'installer-testing' do
        sh("wget -c https://download.go.cd/local/#{ENV['GO_VERSION']}/go-server-#{ENV['GO_VERSION']}.#{meta[:prefix]}")
        sh("wget -c https://download.go.cd/local/#{ENV['GO_VERSION']}/go-agent-#{ENV['GO_VERSION']}.#{meta[:prefix]}")
      end
    end

    task :install do
      cd 'installer-testing' do
        sh("#{meta[:install_command]} go-server-#{ENV['GO_VERSION']}.#{meta[:prefix]}")
        sh("#{meta[:install_command]} go-agent-#{ENV['GO_VERSION']}.#{meta[:prefix]}")
      end
    end

    task :initialize_config do
      sh(%(sed -i -e "s/^DAEMON=.*$/DAEMON=Y/" /etc/default/go-server))
      cp '/vagrant/filesystem/cruise-config.xml', '/etc/go/cruise-config.xml'
      cp '/vagrant/filesystem/passwd', '/etc/go/passwd'

      chown_R 'go', 'go', '/etc/go'
    end

    task :start do
      sh('service go-server start')
      sh('service go-agent start')

      puts 'wait for server to come up'
      sh('wget http://localhost:8153/go/about --waitretry=20 --retry-connrefused --quiet -O /dev/null')

      puts 'wait for agent to come up'
      Timeout.timeout(180) do
        loop do
          agents = JSON.parse(open('http://localhost:8153/go/api/agents',             'Accept' => 'application/vnd.go.cd.v1+json',
                                                                                      'Authorization' => "Basic #{Base64.encode64('user.admin:badger')}").read)['_embedded']['agents']

          if agents.any? { |a| a['status'] == 'Idle' }
            puts 'Agent is up'
            break
          end
        end
      end
    end

    task :create_pipeline do
      url = 'http://localhost:8153/go/api/admin/pipelines'
      puts 'create a pipeline'
      sh("curl -sL -w \"%{http_code}\" -X POST -H \"Authorization: Basic dXNlci5hZG1pbjpiYWRnZXI=\" -H \"Accept: application/vnd.go.cd.v1+json\" -H \"Content-Type: application/json\" --data \"@/vagrant/filesystem/pipeline.json\" #{url} -o /dev/null")
    end

    task :trigger_pipeline do
      url = "http://localhost:8153/go/api/pipelines/#{PIPELINE_NAME}/unpause"
      puts 'unpause and trigger the pipeline'
      sh("curl -sL -w \"%{http_code}\" -X POST -H \"Authorization: Basic dXNlci5hZG1pbjpiYWRnZXI=\" #{url} -o /dev/null")
    end

    task :check_pipeline_pass do
      begin
        Timeout.timeout(180) do
          loop do
            runs = JSON.parse(open('http://localhost:8153/go/api/dashboard',               'Accept' => 'application/vnd.go.cd.v1+json',
                                                                                           'Authorization' => "Basic #{Base64.encode64('user.admin:badger')}").read)

            if hash_search(runs, 'status') == 'Passed'
              puts 'Pipeline completed with success'
              break
            end
          end
        end
      rescue Timeout::Error => e
        raise 'Pipeline was not built successfully'
      end
    end

    def hash_search(hash, key)
      if hash.respond_to?(:key?) && hash.key?(key)
        hash[key]
      elsif hash.respond_to?(:each)
        r = nil
        hash.find { |*a| r = hash_search(a.last, key) }
        r
      end
    end

    task all: [:clean, :init, :download, :install, :initialize_config, :start, :create_pipeline, :trigger_pipeline, :check_pipeline_pass]
  end
end
