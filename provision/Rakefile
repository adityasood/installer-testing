##########################################################################
# Copyright 2016 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

require 'open-uri'
require 'timeout'
require 'json'
require 'net/http'

PIPELINE_NAME      = 'testpipeline'
GO_VERSION         = ENV['GO_VERSION']
GO_INITIAL_VERSION = ENV['GO_INITIAL_VERSION']
USE_POSTGRES       = ENV['USE_POSTGRES'] == 'yes'

class Debian
  include Rake::DSL if defined?(Rake::DSL)

  def repo
    open('/etc/apt/sources.list.d/gocd.list', 'w') do |f|
      f.puts('deb https://download.go.cd /')
      f.puts('deb https://download.go.cd/experimental /')
    end
    sh('curl --silent --fail https://download.go.cd/GOCD-GPG-KEY.asc | apt-key add -')
    sh('apt-get update --quiet')
  end

  def install(pkg_name, pkg_version)
    sh("apt-get --quiet -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install -y #{pkg_name}=#{pkg_version}")
  end

  def uninstall(pkg_name, pkg_version)
    sh("apt-get purge --assume-yes --quiet #{pkg_name}=#{pkg_version}")
  end

  def setup_postgres
    if File.exist?('/etc/postgresql/9.3/main/pg_hba.conf')
      $stderr.puts 'It looks like postgres is already setup, continuing'
      return
    end

    sh('apt-get install --assume-yes --quiet postgresql-9.3 postgresql-contrib-9.3')
    sh(%Q{sudo -H -u postgres bash -c 'createdb -U postgres cruise'})
    sh(%Q{sudo -H -u postgres bash -c 'sed -i 's/peer/md5/g' /etc/postgresql/9.3/main/pg_hba.conf'})
    sh(%Q{sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"})
    sh('/etc/init.d/postgresql restart')
  end

end

class Redhat
  include Rake::DSL if defined?(Rake::DSL)

  def repo
    cp 'yum.gocd.repo', '/etc/yum.repos.d/gocd.repo'
    sh("yum makecache --quiet --disablerepo='*' --enablerepo='gocd*'")
  end

  def install(pkg_name, pkg_version)
    sh("yum install --quiet --assumeyes #{pkg_name}-#{pkg_version}")
  end

  def uninstall(pkg_name, pkg_version)
    sh("yum remove --quiet --assumeyes #{pkg_name}-#{pkg_version}")
  end

  def setup_postgres
    if File.exist?('/var/lib/pgsql/data/pg_hba.conf')
      $stderr.puts 'It looks like postgres is already setup, continuing'
      return
    end

    sh('yum install --quiet --assumeyes postgresql-server postgresql-contrib')
    sh(%Q{sudo -H -u postgres bash -c 'initdb -D /var/lib/pgsql/data'})
    sh('service postgresql start')
    sh(%Q{sudo -H -u postgres bash -c 'sed -i 's/peer/md5/g' /var/lib/pgsql/data/pg_hba.conf'})
    sh(%Q{sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"})
    sh('service postgresql restart')
    sh(%Q{sudo -H -u postgres bash -c 'createdb -U postgres cruise'})
  end
end

{
  'debian' => Debian,
  'centos' => Redhat,
}.each do |os, klass|
  namespace os do
    task :repo do
      klass.new.repo
    end

    task :install_server do
      klass.new.install('go-server', GO_VERSION)
      sh('service go-server start')
    end

    task :install_agent do
      klass.new.install('go-agent', GO_VERSION)
    end

    task :install_latest_version => [:install_server, :install_agent]

    task :install_old_version do
      klass.new.install('go-server', GO_INITIAL_VERSION)
      klass.new.install('go-agent', GO_INITIAL_VERSION)
    end

    task :setup_postgres_addon do
      if USE_POSTGRES
        p 'Setting up postgres addon'
        sh('sleep 60')
        sh('/etc/init.d/go-server stop')
        klass.new.setup_postgres

        if File.read('/etc/default/go-server') =~ /postgres/
          $stderr.puts 'Postgres configuration is already present in /etc/default/go-server, skipping'
        else
          $stderr.puts 'Postgres configuration is not present in /etc/default/go-server, adding'
          open('/etc/default/go-server', 'a') do |f|
            f.puts
            f.puts '# Use the postgres DB provider instead of h2'
            f.puts 'GO_SERVER_SYSTEM_PROPERTIES=-Dgo.database.provider=com.thoughtworks.go.postgresql.PostgresqlDatabase'
          end
        end
        version_revision = GO_INITIAL_VERSION || GO_VERSION
        version          = version_revision.split('-')[0][0, 4]

        cp 'postgresqldb.properties', '/etc/go/postgresqldb.properties'
        mkdir_p '/var/lib/go-server/addons'
        cp Dir["/vagrant/addons/go-postgresql-#{version}*.jar"].first, '/var/lib/go-server/addons'

        chown_r 'go', 'go', ['/var/lib/go-server/addons', '/etc/go/postgresqldb.properties']
        sh('/etc/init.d/go-server start')
      else
        p 'Continuing with h2 database'
      end
    end

    task :change_postgres_addons_jar do
      if USE_POSTGRES
        revision = GO_INITIAL_VERSION || GO_VERSION
        version  = revision.split('-')[0][0, 4]
        rm_rf Dir["/var/lib/go-server/addons/*.jar"]
        cp Dir["/vagrant/addons/go-postgresql-#{version}*.jar"], '/var/lib/go-server/addons'
        chown_r 'go', 'go', '/var/lib/go-server/addons'
        sh('/etc/init.d/go-server restart')
      end
    end

    task :start_agent do
      sh('service go-agent start')
    end

    task :check_service_is_up do
      service_status
    end

    task :check_service_is_up_again do
      service_status
    end

    def service_status
      puts 'wait for server to come up'
      sh('wget http://localhost:8153/go/about --waitretry=90 --retry-connrefused --quiet -O /dev/null')

      # check if server startup with postgres only
      if var
        Timeout.timeout(120) do
          loop do
            if File.open('/var/log/go-server/go-server.log').lines.any? { |line| line.include?('Using connection configuration jdbc:postgresql://localhost:5432/cruise [User: postgres] [Password Encrypted: false]') }
              p 'server up with postgres'
              break
            end
          end
        end
      end


      puts 'wait for agent to come up'
      Timeout.timeout(180) do
        loop do
          agents = JSON.parse(open('http://localhost:8153/go/api/agents', 'Accept' => 'application/vnd.go.cd.v2+json').read)['_embedded']['agents']

          if agents.any? { |a| a['agent_state'] == 'Idle' }
            puts 'Agent is up'
            break
          end
        end
      end
    end

    task :create_pipeline do
      url = 'http://localhost:8153/go/api/admin/pipelines'
      puts 'create a pipeline'
      sh(%Q{curl -sL -w "%{http_code}" -X POST  -H "Accept: application/vnd.go.cd.v1+json" -H "Content-Type: application/json" --data "@/vagrant/filesystem/pipeline.json" #{url} -o /dev/null})
    end

    task :create_pipeline_by_config do
      if GO_INITIAL_VERSION =~ /\A15/
        create_pipeline
      else
        Rake::Task["#{os}:create_pipeline"].reenable
        Rake::Task["#{os}:create_pipeline"].invoke
      end
    end

    task :unpause_pipeline do
      url = "http://localhost:8153/go/api/pipelines/#{PIPELINE_NAME}/unpause"
      puts 'unpause the pipeline'
      sh(%Q{curl -sL -w "%{http_code}" -X POST  -H "Accept:application/vnd.go.cd.v1+text" -H "CONFIRM:true" #{url} -o /dev/null})
    end

    def trigger_pipeline
      url = "http://localhost:8153/go/api/pipelines/#{PIPELINE_NAME}/schedule"
      puts 'trigger the pipeline'
      sh(%Q{curl -sL -w "%{http_code}" -X POST -H "Accept:application/vnd.go.cd.v1+text" -H "CONFIRM:true" #{url} -o /dev/null})
    end

    task :trigger_pipeline_first do
      if GO_INITIAL_VERSION =~ /\A15/
        trigger_pipeline
      else
        Rake::Task["#{os}:unpause_pipeline"].reenable
        Rake::Task["#{os}:unpause_pipeline"].invoke
      end
    end

    task :trigger_pipeline_again do
      trigger_pipeline
    end

    task :check_pipeline_pass_with_label_1 do
      check_pipeline_in_cctray 1
    end

    task :check_pipeline_pass_with_label_2 do
      check_pipeline_in_cctray 2
    end

    def create_pipeline
      url     = "http://localhost:8153/go/tab/admin/pipelines/#{PIPELINE_NAME}.json"
      uri     = URI(url)
      request = Net::HTTP::Post.new(uri.path)
      request.set_form_data({ 'scm' => 'git', 'url' => 'https://github.com/agoyal-git/testrepo.git', 'builder' => 'exec', 'command' => 'ls' })
      response = Net::HTTP.start(uri.host, uri.port) do |http|
        http.request(request)
      end
      puts 'Successfully created pipeline' if response.is_a?(Net::HTTPCreated)
      raise "Pipeline creation failed with error: #{response.body}" unless response.is_a?(Net::HTTPCreated)
    end

    def check_pipeline_in_cctray label
      begin
        timeout(180) do
          while true do
            response = open('http://localhost:8153/go/cctray.xml').read
            if response.include? %Q(<Project name="#{PIPELINE_NAME} :: defaultStage" activity="Sleeping" lastBuildStatus="Success" lastBuildLabel="#{label}") then
              puts 'Pipeline completed successfully'
              break
            end
          end
        end
      end
    rescue Timeout::Error
      raise 'Pipeline was not built successfully. Wait timed out'
    end

    def check_pipeline_status
      begin
        timeout(180) do
          while true do
            sleep 60
            runs = JSON.parse(open('http://localhost:8153/go/api/dashboard', 'Accept' => 'application/vnd.go.cd.v1+json').read)

            if runs['_embedded']['pipeline_groups'][0]['_embedded']['pipelines'][0]['_embedded']['instances'][0]['_embedded']['stages'][0]['status'] == 'Passed'
              puts 'Pipeline completed with success'
              break
            end
          end
        end
      rescue Timeout::Error => e
        raise 'Pipeline was not built successfully'
      end
    end

    task :stop do
      sh('service go-server stop')
      sh('service go-agent stop')
    end

    task :uninstall do
      klass.new.uninstall('go-server', GO_VERSION)
      klass.new.uninstall('go-agent', GO_VERSION)
      %W(/etc/go /var/log/go-{agent,server} /var/lib/go-{agent,server} /etc/default/go-{agent,server}).each do |glob|
        matching_dirs = Dir.glob(glob)
        rm_rf(matching_dirs) unless matching_dirs.empty?
      end
    end

    task :fresh => [:repo, :install_latest_version, :setup_postgres_addon, :start_agent, :check_service_is_up, :create_pipeline, :unpause_pipeline, :check_pipeline_pass_with_label_1, :stop]
    task :setup => [:repo, :install_old_version, :setup_postgres_addon, :start_agent, :check_service_is_up, :create_pipeline_by_config, :trigger_pipeline_first, :check_pipeline_pass_with_label_1]
    task :upgrade => [:setup, :install_server, :change_postgres_addons_jar, :check_service_is_up_again, :trigger_pipeline_again, :check_pipeline_pass_with_label_2, :stop, :uninstall]
    task :upgrade_test do
      ['16.1.0-2855', '16.3.0-3183', '16.5.0-3305'].each do |version|
        begin
          GO_INITIAL_VERSION=version
          puts "upgrade test. Version FROM: #{GO_INITIAL_VERSION} TO: #{GO_VERSION}"
          Rake::Task["#{os}:upgrade"].invoke
        rescue => e
          raise "Installer testing failed. Error message #{e.message}"
        ensure
          Rake::Task["#{os}:upgrade"].reenable
          Rake::Task["#{os}:setup"].reenable
          Rake::Task["#{os}:repo"].reenable
          Rake::Task["#{os}:install_old_version"].reenable
          Rake::Task["#{os}:setup_postgres_addon"].reenable
          Rake::Task["#{os}:start_agent"].reenable
          Rake::Task["#{os}:check_service_is_up"].reenable
          Rake::Task["#{os}:create_pipeline_by_config"].reenable
          Rake::Task["#{os}:trigger_pipeline_first"].reenable
          Rake::Task["#{os}:check_pipeline_pass_with_label_1"].reenable
          Rake::Task["#{os}:install_server"].reenable
          Rake::Task["#{os}:change_postgres_addons_jar"].reenable
          Rake::Task["#{os}:check_service_is_up_again"].reenable
          Rake::Task["#{os}:trigger_pipeline_again"].reenable
          Rake::Task["#{os}:check_pipeline_pass_with_label_2"].reenable
          Rake::Task["#{os}:stop"].reenable
          Rake::Task["#{os}:uninstall"].reenable
        end
      end
    end

  end
end
