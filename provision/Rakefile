##########################################################################
# Copyright 2016 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

require 'open-uri'
require 'timeout'
require 'json'

PIPELINE_NAME = 'testpipeline'

class Debian
  include Rake::DSL
  def repo
    open('/etc/apt/sources.list.d/gocd.list', 'w') do |f|
      f.puts('deb https://dl.go.cd/experimental /')
    end
    sh("curl --silent --fail https://dl.go.cd/GOCD-GPG-KEY.asc | apt-key add -")
    sh("apt-get update")
  end

  def install(pkg_name, pkg_verion)
    sh("apt-get install -y #{pkg_name}=#{pkg_verion}")
  end
end

class Redhat
  include Rake::DSL
  def repo
    open('/etc/yum.repos.d/gocd.repo', 'w') do |f|
      f.puts('[gocd]')
      f.puts('name=gocd')
      f.puts('baseurl=https://dl.go.cd/experimental')
      f.puts('enabled=1')
      f.puts('gpgcheck=1')
      f.puts('gpgkey=https://dl.go.cd/GOCD-GPG-KEY.asc')
    end
    sh("yum makecache --disablerepo='*' --enablerepo=gocd")
  end

  def install(pkg_name, pkg_verion)
    sh("yum install --assumeyes #{pkg_name}-#{pkg_verion}")
  end
end

{
  'debian'     => Debian,
  'centos'     => Redhat,
}.each do |os, klass|
  namespace os do
    task :repo do
      klass.new.repo
    end

    task :install do
      klass.new.install('go-server', ENV['GO_VERSION'])
      klass.new.install('go-agent', ENV['GO_VERSION'])
    end

    task :start do
      sh('service go-agent start')

      puts 'wait for server to come up'
      sh('wget http://localhost:8153/go/about --waitretry=30 --retry-connrefused --quiet -O /dev/null')

      puts 'wait for agent to come up'
      Timeout.timeout(180) do
        loop do
          agents = JSON.parse(open('http://localhost:8153/go/api/agents','Accept' => 'application/vnd.go.cd.v1+json').read)['_embedded']['agents']

          if agents.any? { |a| a['status'] == 'Idle' }
            puts 'Agent is up'
            break
          end
        end
      end
    end

    task :create_pipeline do
      url = 'http://localhost:8153/go/api/admin/pipelines'
      puts 'create a pipeline'
      sh(%Q{curl -sL -w "%{http_code}" -X POST  -H "Accept: application/vnd.go.cd.v1+json" -H "Content-Type: application/json" --data "@/vagrant/filesystem/pipeline.json" #{url} -o /dev/null})
    end

    task :trigger_pipeline do
      url = "http://localhost:8153/go/api/pipelines/#{PIPELINE_NAME}/unpause"
      puts 'unpause and trigger the pipeline'
      sh(%Q{curl -sL -w "%{http_code}" -X POST  #{url} -o /dev/null})
    end

    task :check_pipeline_pass do
      begin
        timeout(180) do
          while(true) do
            sleep 60
            runs = JSON.parse(open('http://localhost:8153/go/api/dashboard','Accept' => 'application/vnd.go.cd.v1+json').read)

            if runs["_embedded"]["pipeline_groups"][0]["_embedded"]["pipelines"][0]["_embedded"]["instances"][0]["_embedded"]["stages"][0]["status"]  == 'Passed'
              puts 'Pipeline completed with success'
              break
            end
          end
        end
      rescue Timeout::Error => e
        raise 'Pipeline was not built successfully'
      end
    end

    task :stop do
      sh('service go-server stop')
      sh('service go-agent stop')
    end

    task :all => [:repo, :install, :start, :create_pipeline, :trigger_pipeline, :check_pipeline_pass, :stop]
  end
end
